
optiboot_atmega1284p_slow.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  0001f000  0001f000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005f  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000029c  00000000  00000000  000002d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000016b  00000000  00000000  00000571  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000415  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000012d  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002c9  00000000  00000000  00000ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .version      00000002  00000000  00000000  00000f6a  2**0
                  CONTENTS, READONLY
 10 .debug_ranges 00000078  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001f000 <main>:
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
   1f000:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
   1f002:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
   1f004:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
   1f006:	81 ff       	sbrs	r24, 1
   1f008:	f3 d0       	rcall	.+486    	; 0x1f1f0 <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   1f00a:	85 e0       	ldi	r24, 0x05	; 5
   1f00c:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
   1f010:	82 e0       	ldi	r24, 0x02	; 2
   1f012:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
   1f016:	88 e1       	ldi	r24, 0x18	; 24
   1f018:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
   1f01c:	86 e0       	ldi	r24, 0x06	; 6
   1f01e:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
   1f022:	81 e8       	ldi	r24, 0x81	; 129
   1f024:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
   1f028:	8e e0       	ldi	r24, 0x0E	; 14
   1f02a:	cc d0       	rcall	.+408    	; 0x1f1c4 <watchdogConfig>

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
   1f02c:	21 9a       	sbi	0x04, 1	; 4
   1f02e:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1f030:	2c e3       	ldi	r18, 0x3C	; 60
   1f032:	3b ef       	ldi	r19, 0xFB	; 251
    TIFR1 = _BV(TOV1);
   1f034:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1f036:	30 93 85 00 	sts	0x0085, r19
   1f03a:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
   1f03e:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
   1f040:	b0 9b       	sbis	0x16, 0	; 22
   1f042:	fe cf       	rjmp	.-4      	; 0x1f040 <main+0x40>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
   1f044:	19 9a       	sbi	0x03, 1	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1f046:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
   1f048:	81 50       	subi	r24, 0x01	; 1
   1f04a:	a9 f7       	brne	.-22     	; 0x1f036 <main+0x36>
   1f04c:	cc 24       	eor	r12, r12
   1f04e:	dd 24       	eor	r13, r13
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1f050:	aa 24       	eor	r10, r10
   1f052:	a3 94       	inc	r10
      __boot_page_write_short((uint16_t)(void*)address);
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
   1f054:	a1 e1       	ldi	r26, 0x11	; 17
   1f056:	9a 2e       	mov	r9, r26
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
   1f058:	f3 e0       	ldi	r31, 0x03	; 3
   1f05a:	bf 2e       	mov	r11, r31
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
   1f05c:	a7 d0       	rcall	.+334    	; 0x1f1ac <getch>

    if(ch == STK_GET_PARAMETER) {
   1f05e:	81 34       	cpi	r24, 0x41	; 65
   1f060:	69 f4       	brne	.+26     	; 0x1f07c <main+0x7c>
      unsigned char which = getch();
   1f062:	a4 d0       	rcall	.+328    	; 0x1f1ac <getch>
   1f064:	08 2f       	mov	r16, r24
      verifySpace();
   1f066:	b4 d0       	rcall	.+360    	; 0x1f1d0 <verifySpace>
      if (which == 0x82) {
   1f068:	02 38       	cpi	r16, 0x82	; 130
   1f06a:	09 f4       	brne	.+2      	; 0x1f06e <main+0x6e>
   1f06c:	8d c0       	rjmp	.+282    	; 0x1f188 <main+0x188>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
      } else if (which == 0x81) {
   1f06e:	01 38       	cpi	r16, 0x81	; 129
   1f070:	11 f4       	brne	.+4      	; 0x1f076 <main+0x76>
	  putch(OPTIBOOT_MAJVER);
   1f072:	84 e0       	ldi	r24, 0x04	; 4
   1f074:	01 c0       	rjmp	.+2      	; 0x1f078 <main+0x78>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
   1f076:	83 e0       	ldi	r24, 0x03	; 3
   1f078:	91 d0       	rcall	.+290    	; 0x1f19c <putch>
   1f07a:	8d c0       	rjmp	.+282    	; 0x1f196 <main+0x196>
      }
    }
    else if(ch == STK_SET_DEVICE) {
   1f07c:	82 34       	cpi	r24, 0x42	; 66
   1f07e:	11 f4       	brne	.+4      	; 0x1f084 <main+0x84>
      // SET DEVICE is ignored
      getNch(20);
   1f080:	84 e1       	ldi	r24, 0x14	; 20
   1f082:	03 c0       	rjmp	.+6      	; 0x1f08a <main+0x8a>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
   1f084:	85 34       	cpi	r24, 0x45	; 69
   1f086:	19 f4       	brne	.+6      	; 0x1f08e <main+0x8e>
      // SET DEVICE EXT is ignored
      getNch(5);
   1f088:	85 e0       	ldi	r24, 0x05	; 5
   1f08a:	aa d0       	rcall	.+340    	; 0x1f1e0 <getNch>
   1f08c:	84 c0       	rjmp	.+264    	; 0x1f196 <main+0x196>
    }
    else if(ch == STK_LOAD_ADDRESS) {
   1f08e:	85 35       	cpi	r24, 0x55	; 85
   1f090:	a1 f4       	brne	.+40     	; 0x1f0ba <main+0xba>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
   1f092:	8c d0       	rcall	.+280    	; 0x1f1ac <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
   1f094:	08 2f       	mov	r16, r24
   1f096:	10 e0       	ldi	r17, 0x00	; 0
   1f098:	89 d0       	rcall	.+274    	; 0x1f1ac <getch>
   1f09a:	e8 2e       	mov	r14, r24
   1f09c:	ff 24       	eor	r15, r15
   1f09e:	fe 2c       	mov	r15, r14
   1f0a0:	ee 24       	eor	r14, r14
   1f0a2:	e0 2a       	or	r14, r16
   1f0a4:	f1 2a       	or	r15, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
   1f0a6:	8f 2d       	mov	r24, r15
   1f0a8:	88 1f       	adc	r24, r24
   1f0aa:	88 27       	eor	r24, r24
   1f0ac:	88 1f       	adc	r24, r24
   1f0ae:	8b bf       	out	0x3b, r24	; 59
#endif
      newAddress += newAddress; // Convert from word address to byte address
   1f0b0:	ee 0c       	add	r14, r14
   1f0b2:	ff 1c       	adc	r15, r15
      address = newAddress;
      verifySpace();
   1f0b4:	8d d0       	rcall	.+282    	; 0x1f1d0 <verifySpace>
   1f0b6:	67 01       	movw	r12, r14
   1f0b8:	6e c0       	rjmp	.+220    	; 0x1f196 <main+0x196>
    }
    else if(ch == STK_UNIVERSAL) {
   1f0ba:	86 35       	cpi	r24, 0x56	; 86
   1f0bc:	21 f4       	brne	.+8      	; 0x1f0c6 <main+0xc6>
      // UNIVERSAL command is ignored
      getNch(4);
   1f0be:	84 e0       	ldi	r24, 0x04	; 4
   1f0c0:	8f d0       	rcall	.+286    	; 0x1f1e0 <getNch>
      putch(0x00);
   1f0c2:	80 e0       	ldi	r24, 0x00	; 0
   1f0c4:	d9 cf       	rjmp	.-78     	; 0x1f078 <main+0x78>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
   1f0c6:	84 36       	cpi	r24, 0x64	; 100
   1f0c8:	09 f0       	breq	.+2      	; 0x1f0cc <main+0xcc>
   1f0ca:	41 c0       	rjmp	.+130    	; 0x1f14e <main+0x14e>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
   1f0cc:	6f d0       	rcall	.+222    	; 0x1f1ac <getch>
      length = getch();
   1f0ce:	6e d0       	rcall	.+220    	; 0x1f1ac <getch>
   1f0d0:	08 2f       	mov	r16, r24
      getch();
   1f0d2:	6c d0       	rcall	.+216    	; 0x1f1ac <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
   1f0d4:	80 e0       	ldi	r24, 0x00	; 0
   1f0d6:	c8 16       	cp	r12, r24
   1f0d8:	80 ee       	ldi	r24, 0xE0	; 224
   1f0da:	d8 06       	cpc	r13, r24
   1f0dc:	18 f4       	brcc	.+6      	; 0x1f0e4 <main+0xe4>
   1f0de:	f6 01       	movw	r30, r12
   1f0e0:	b7 be       	out	0x37, r11	; 55
   1f0e2:	e8 95       	spm
   1f0e4:	c0 e0       	ldi	r28, 0x00	; 0
   1f0e6:	d1 e0       	ldi	r29, 0x01	; 1

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
   1f0e8:	61 d0       	rcall	.+194    	; 0x1f1ac <getch>
   1f0ea:	89 93       	st	Y+, r24
      while (--length);
   1f0ec:	0c 17       	cp	r16, r28
   1f0ee:	e1 f7       	brne	.-8      	; 0x1f0e8 <main+0xe8>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
   1f0f0:	f0 e0       	ldi	r31, 0x00	; 0
   1f0f2:	cf 16       	cp	r12, r31
   1f0f4:	f0 ee       	ldi	r31, 0xE0	; 224
   1f0f6:	df 06       	cpc	r13, r31
   1f0f8:	18 f0       	brcs	.+6      	; 0x1f100 <main+0x100>
   1f0fa:	f6 01       	movw	r30, r12
   1f0fc:	b7 be       	out	0x37, r11	; 55
   1f0fe:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
   1f100:	67 d0       	rcall	.+206    	; 0x1f1d0 <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
   1f102:	07 b6       	in	r0, 0x37	; 55
   1f104:	00 fc       	sbrc	r0, 0
   1f106:	fd cf       	rjmp	.-6      	; 0x1f102 <main+0x102>
   1f108:	a6 01       	movw	r20, r12
   1f10a:	a0 e0       	ldi	r26, 0x00	; 0
   1f10c:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
   1f10e:	2c 91       	ld	r18, X
   1f110:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
   1f112:	11 96       	adiw	r26, 0x01	; 1
   1f114:	8c 91       	ld	r24, X
   1f116:	11 97       	sbiw	r26, 0x01	; 1
   1f118:	90 e0       	ldi	r25, 0x00	; 0
   1f11a:	98 2f       	mov	r25, r24
   1f11c:	88 27       	eor	r24, r24
   1f11e:	82 2b       	or	r24, r18
   1f120:	93 2b       	or	r25, r19
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
   1f122:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1f124:	fa 01       	movw	r30, r20
   1f126:	0c 01       	movw	r0, r24
   1f128:	a7 be       	out	0x37, r10	; 55
   1f12a:	e8 95       	spm
   1f12c:	11 24       	eor	r1, r1
        addrPtr += 2;
   1f12e:	4e 5f       	subi	r20, 0xFE	; 254
   1f130:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
   1f132:	f2 e0       	ldi	r31, 0x02	; 2
   1f134:	a0 30       	cpi	r26, 0x00	; 0
   1f136:	bf 07       	cpc	r27, r31
   1f138:	51 f7       	brne	.-44     	; 0x1f10e <main+0x10e>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
   1f13a:	85 e0       	ldi	r24, 0x05	; 5
   1f13c:	f6 01       	movw	r30, r12
   1f13e:	87 bf       	out	0x37, r24	; 55
   1f140:	e8 95       	spm
      boot_spm_busy_wait();
   1f142:	07 b6       	in	r0, 0x37	; 55
   1f144:	00 fc       	sbrc	r0, 0
   1f146:	fd cf       	rjmp	.-6      	; 0x1f142 <main+0x142>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
   1f148:	97 be       	out	0x37, r9	; 55
   1f14a:	e8 95       	spm
   1f14c:	24 c0       	rjmp	.+72     	; 0x1f196 <main+0x196>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
   1f14e:	84 37       	cpi	r24, 0x74	; 116
   1f150:	a1 f4       	brne	.+40     	; 0x1f17a <main+0x17a>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
   1f152:	2c d0       	rcall	.+88     	; 0x1f1ac <getch>
      length = getch();
   1f154:	2b d0       	rcall	.+86     	; 0x1f1ac <getch>
   1f156:	e8 2e       	mov	r14, r24
      getch();
   1f158:	29 d0       	rcall	.+82     	; 0x1f1ac <getch>

      verifySpace();
   1f15a:	3a d0       	rcall	.+116    	; 0x1f1d0 <verifySpace>
   1f15c:	e6 01       	movw	r28, r12
   1f15e:	0e 2d       	mov	r16, r14
// Since RAMPZ should already be set, we need to use EPLM directly.
//      do putch(pgm_read_byte_near(address++));
//      while (--length);
      do {
        uint8_t result;
        __asm__ ("elpm %0,Z\n":"=r"(result):"z"(address));
   1f160:	fe 01       	movw	r30, r28
   1f162:	86 91       	elpm	r24, Z+
        putch(result);
   1f164:	1b d0       	rcall	.+54     	; 0x1f19c <putch>
        address++;
   1f166:	21 96       	adiw	r28, 0x01	; 1
      }
      while (--length);
   1f168:	01 50       	subi	r16, 0x01	; 1
   1f16a:	d1 f7       	brne	.-12     	; 0x1f160 <main+0x160>
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
   1f16c:	08 94       	sec
   1f16e:	c1 1c       	adc	r12, r1
   1f170:	d1 1c       	adc	r13, r1
   1f172:	ea 94       	dec	r14
   1f174:	ce 0c       	add	r12, r14
   1f176:	d1 1c       	adc	r13, r1
   1f178:	0e c0       	rjmp	.+28     	; 0x1f196 <main+0x196>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
   1f17a:	85 37       	cpi	r24, 0x75	; 117
   1f17c:	39 f4       	brne	.+14     	; 0x1f18c <main+0x18c>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
   1f17e:	28 d0       	rcall	.+80     	; 0x1f1d0 <verifySpace>
      putch(SIGNATURE_0);
   1f180:	8e e1       	ldi	r24, 0x1E	; 30
   1f182:	0c d0       	rcall	.+24     	; 0x1f19c <putch>
      putch(SIGNATURE_1);
   1f184:	87 e9       	ldi	r24, 0x97	; 151
   1f186:	0a d0       	rcall	.+20     	; 0x1f19c <putch>
      putch(SIGNATURE_2);
   1f188:	85 e0       	ldi	r24, 0x05	; 5
   1f18a:	76 cf       	rjmp	.-276    	; 0x1f078 <main+0x78>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
   1f18c:	81 35       	cpi	r24, 0x51	; 81
   1f18e:	11 f4       	brne	.+4      	; 0x1f194 <main+0x194>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
   1f190:	88 e0       	ldi	r24, 0x08	; 8
   1f192:	18 d0       	rcall	.+48     	; 0x1f1c4 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
   1f194:	1d d0       	rcall	.+58     	; 0x1f1d0 <verifySpace>
    }
    putch(STK_OK);
   1f196:	80 e1       	ldi	r24, 0x10	; 16
   1f198:	01 d0       	rcall	.+2      	; 0x1f19c <putch>
   1f19a:	60 cf       	rjmp	.-320    	; 0x1f05c <main+0x5c>

0001f19c <putch>:
  }
}

void putch(char ch) {
   1f19c:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
   1f19e:	80 91 c0 00 	lds	r24, 0x00C0
   1f1a2:	85 ff       	sbrs	r24, 5
   1f1a4:	fc cf       	rjmp	.-8      	; 0x1f19e <putch+0x2>
  UDR0 = ch;
   1f1a6:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
   1f1aa:	08 95       	ret

0001f1ac <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
   1f1ac:	80 91 c0 00 	lds	r24, 0x00C0
   1f1b0:	87 ff       	sbrs	r24, 7
   1f1b2:	fc cf       	rjmp	.-8      	; 0x1f1ac <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
   1f1b4:	80 91 c0 00 	lds	r24, 0x00C0
   1f1b8:	84 fd       	sbrc	r24, 4
   1f1ba:	01 c0       	rjmp	.+2      	; 0x1f1be <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1f1bc:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
   1f1be:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1f1c2:	08 95       	ret

0001f1c4 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1f1c4:	e0 e6       	ldi	r30, 0x60	; 96
   1f1c6:	f0 e0       	ldi	r31, 0x00	; 0
   1f1c8:	98 e1       	ldi	r25, 0x18	; 24
   1f1ca:	90 83       	st	Z, r25
  WDTCSR = x;
   1f1cc:	80 83       	st	Z, r24
}
   1f1ce:	08 95       	ret

0001f1d0 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1f1d0:	ed df       	rcall	.-38     	; 0x1f1ac <getch>
   1f1d2:	80 32       	cpi	r24, 0x20	; 32
   1f1d4:	19 f0       	breq	.+6      	; 0x1f1dc <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1f1d6:	88 e0       	ldi	r24, 0x08	; 8
   1f1d8:	f5 df       	rcall	.-22     	; 0x1f1c4 <watchdogConfig>
   1f1da:	ff cf       	rjmp	.-2      	; 0x1f1da <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
   1f1dc:	84 e1       	ldi	r24, 0x14	; 20
}
   1f1de:	de cf       	rjmp	.-68     	; 0x1f19c <putch>

0001f1e0 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1f1e0:	1f 93       	push	r17
   1f1e2:	18 2f       	mov	r17, r24
  do getch(); while (--count);
   1f1e4:	e3 df       	rcall	.-58     	; 0x1f1ac <getch>
   1f1e6:	11 50       	subi	r17, 0x01	; 1
   1f1e8:	e9 f7       	brne	.-6      	; 0x1f1e4 <getNch+0x4>
  verifySpace();
   1f1ea:	f2 df       	rcall	.-28     	; 0x1f1d0 <verifySpace>
}
   1f1ec:	1f 91       	pop	r17
   1f1ee:	08 95       	ret

0001f1f0 <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
   1f1f0:	80 e0       	ldi	r24, 0x00	; 0
   1f1f2:	e8 df       	rcall	.-48     	; 0x1f1c4 <watchdogConfig>
  __asm__ __volatile__ (
   1f1f4:	ee 27       	eor	r30, r30
   1f1f6:	ff 27       	eor	r31, r31
   1f1f8:	09 94       	ijmp
